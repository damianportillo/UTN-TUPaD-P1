"""
TP - Recursividad
Autor: Dami√°n Jorge Portillo
Materia: Programaci√≥n I - Tecnicatura Universitaria en Programaci√≥n a Distancia
"""

# 1) Factorial recursivo
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

def mostrar_factoriales(hasta):
    for i in range(1, hasta + 1):
        print(f"{i}! = {factorial(i)}")

# 2) Serie de Fibonacci recursiva
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

def mostrar_fibonacci(hasta):
    print("Serie de Fibonacci:")
    for i in range(hasta):
        print(fibonacci(i), end=" ")
    print()

# 3) Potencia recursiva
def potencia(base, exponente):
    if exponente == 0:
        return 1
    return base * potencia(base, exponente - 1)

# 4) Conversi√≥n a binario recursiva
def decimal_a_binario(n):
    if n == 0:
        return ""
    return decimal_a_binario(n // 2) + str(n % 2)

# 5) Verificaci√≥n de pal√≠ndromo recursivo
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

# 6) Suma de d√≠gitos recursiva
def suma_digitos(n):
    if n < 10:
        return n
    return (n % 10) + suma_digitos(n // 10)

# 7) Pir√°mide de bloques recursiva
def contar_bloques(n):
    if n == 1:
        return 1
    return n + contar_bloques(n - 1)

# 8) Contar d√≠gitos recursivamente
def contar_digito(numero, digito):
    if numero == 0:
        return 0
    return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)

# Programa principal de prueba
if __name__ == "__main__":
    
    # Enunciado - Actividad 1
    ej_1 = '''\n1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. 
Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de 
todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario. \n'''
    print(ej_1)

    # Resoluci√≥n - Actividad 1
    num = int(input("Ingrese un n√∫mero para calcular factoriales hasta ese n√∫mero: "))
    mostrar_factoriales(num)

    # Enunciado - Actividad 2
    ej_2 = '''\n2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.  \n'''
    print(ej_2)

    # Resoluci√≥n - Actividad 2
    num = int(input("Ingrese hasta qu√© posici√≥n desea ver la serie de Fibonacci: "))
    mostrar_fibonacci(num)

    # Enunciado - Actividad 3
    ej_3 = '''\n3)Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.\n'''
    print(ej_3)
    
    # Resoluci√≥n - Actividad 3
    base = int(input("Base: "))
    exponente = int(input("Exponente: "))
    print(f"{base}^{exponente} = {potencia(base, exponente)}")

    # Enunciado - Actividad 4
    ej_4 = '''\n4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal
y devuelva su representaci√≥n en binario como una cadena de texto. \n'''
    print(ej_4)

    # Resoluci√≥n - Actividad 4
    decimal = int(input("Ingrese un n√∫mero decimal positivo: "))
    resultado = decimal_a_binario(decimal)
    print(f"Binario: {resultado if resultado else '0'}")

    # Enunciado - Actividad 5
    ej_5 = '''\n5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto
sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es. 
Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed().  \n'''
    print(ej_5)

    # Resoluci√≥n - Actividad 5
    palabra = input("Ingrese una palabra sin espacios ni tildes: ").lower()
    print("Es pal√≠ndromo." if es_palindromo(palabra) else "No es pal√≠ndromo.")

    # Enunciado - Actividad 6
    ej_6 = '''\n6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)  \n'''
    print(ej_6)

    # Resoluci√≥n - Actividad 6
    numero = int(input("Ingrese un n√∫mero entero positivo: "))
    print(f"Suma de d√≠gitos: {suma_digitos(numero)}")

    # Enunciado - Actividad 7
    ej_7 = '''\n7)  Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 

Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide. 

Ejemplos: 
contar_bloques(1)   ‚Üí 1         (1) 
contar_bloques(2)   ‚Üí 3         (2 + 1) 
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)  \n'''
    print(ej_7)

    # Resoluci√≥n - Actividad 7
    bloques = int(input("Ingrese la cantidad de bloques del nivel m√°s bajo: "))
    print(f"Total de bloques necesarios: {contar_bloques(bloques)}")

    # Enunciado - Actividad 8
    ej_8 = '''\n8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
aparece ese d√≠gito dentro del n√∫mero. 
Ejemplos: 
contar_digito(12233421, 2)   ‚Üí 3   
contar_digito(5555, 5)       ‚Üí 4   
contar_digito(123456, 7)     ‚Üí 0    \n'''
    print(ej_8)

    # Resoluci√≥n - Actividad 8
    numero = int(input("Ingrese un n√∫mero entero positivo: "))
    dig = int(input("Ingrese un d√≠gito (0-9): "))
    print(f"El d√≠gito {dig} aparece {contar_digito(numero, dig)} veces. \n")
